// src/pages/tests/Personality.tsx
import { useMemo, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import s from './Personality.module.css';

type Option = 'A' | 'B' | 'C' | 'D';

const QUESTIONS: { q: string; options: Record<Option, string> }[] = [
  { q: '–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—à—å –≤—ã—Ö–æ–¥–Ω—ã–µ?', options: {
      A: '–° –¥—Ä—É–∑—å—è–º–∏ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫–µ',
      B: '–î–æ–º–∞ –∑–∞ –∫–Ω–∏–≥–æ–π, —Ñ–∏–ª—å–º–æ–º –∏–ª–∏ –∏–≥—Ä–∞–º–∏',
      C: '–ó–∞–Ω–∏–º–∞—è—Å—å —á–µ–º-—Ç–æ –ø–æ–ª–µ–∑–Ω—ã–º ‚Äî —Å–ø–æ—Ä—Ç, —Ö–æ–±–±–∏, —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ',
      D: '–°–ø–æ–Ω—Ç–∞–Ω–Ω–æ! –ö–∞–∫ –ø–æ–π–¥–µ—Ç ‚Äî —è –Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é –∑–∞—Ä–∞–Ω–µ–µ',
    }},
  { q: '–ö–∞–∫ —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è?', options: {
      A: '–ë—ã—Å—Ç—Ä–æ –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ',
      B: '–í–∑–≤–µ—à–∏–≤–∞—è –≤—Å–µ –∑–∞ –∏ –ø—Ä–æ—Ç–∏–≤',
      C: '–°–æ–≤–µ—Ç—É—é—Å—å —Å –¥—Ä—É–≥–∏–º–∏',
      D: '–ù–∞—É–≥–∞–¥ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞—Å—Ç—Ä–µ–≤–∞—Ç—å –Ω–∞ –º–µ—Å—Ç–µ',
    }},
  { q: '–ß—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ?', options: {
      A: '–≠–º–æ—Ü–∏–∏ –∏ –æ–±—â–µ–Ω–∏–µ',
      B: '–õ–æ–≥–∏–∫–∞ –∏ —Ñ–∞–∫—Ç—ã',
      C: '–ü—Ä–∞–∫—Ç–∏–∫–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–µ',
      D: '–í–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –º–µ—á—Ç—ã',
    }},
  { q: '–í –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –≤—Å–µ–≥–æ?', options: {
      A: '–í —à—É–º–Ω–æ–π, –≤–µ—Å—ë–ª–æ–π ‚Äî –ª—é–±–ª—é –≤–Ω–∏–º–∞–Ω–∏–µ',
      B: '–í —É–∑–∫–æ–º –∫—Ä—É–≥—É –±–ª–∏–∑–∫–∏—Ö –ª—é–¥–µ–π',
      C: '–° –ª—é–¥—å–º–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ —á—Ç–æ-—Ç–æ –≤–º–µ—Å—Ç–µ –¥–µ–ª–∞—Ç—å',
      D: '–ò –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ, –∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
    }},
  { q: '–ö–∞–∫ —Ç—ã —Ä–µ–∞–≥–∏—Ä—É–µ—à—å –Ω–∞ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏?', options: {
      A: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–≥—É –≤—Å–ø—ã–ª–∏—Ç—å',
      B: '–°—Ç–∞—Ä–∞—é—Å—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ',
      C: '–ò—â—É –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
      D: '–£—Ö–æ–∂—É –≤ —Å–µ–±—è, —á—Ç–æ–±—ã –ø–æ–¥—É–º–∞—Ç—å',
    }},
  { q: '–ß—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ —É—á—ë–±–µ?', options: {
      A: '–û–±—â–µ–Ω–∏–µ –∏ –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
      B: '–ê–Ω–∞–ª–∏–∑, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–µ—Ç–∞–ª–∏',
      C: '–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
      D: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã',
    }},
  { q: '–ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º?', options: {
      A: '–õ—é–±–ª—é! –ù–æ–≤–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç',
      B: '–° –æ–ø–∞—Å–∫–æ–π, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
      C: '–ü—Ä–∏—Å–ø–æ—Å–∞–±–ª–∏–≤–∞—é—Å—å –±—ã—Å—Ç—Ä–æ',
      D: '–ï—Å–ª–∏ —ç—Ç–æ —É–ª—É—á—à–µ–Ω–∏—è ‚Äî –ø–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç',
    }},
  { q: '–ö–∞–∫–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —Ç–µ–±–µ –ø—Ä–∏—è—Ç–Ω–µ–µ —É—Å–ª—ã—à–∞—Ç—å?', options: {
      A: '¬´–¢—ã —Ç–∞–∫–æ–π —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π!¬ª',
      B: '¬´–¢—ã –æ—á–µ–Ω—å —É–º–Ω—ã–π!¬ª',
      C: '¬´–¢—ã –Ω–∞–¥—ë–∂–Ω—ã–π –∏ —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω—ã–π!¬ª',
      D: '¬´–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π!¬ª',
    }},
  { q: '–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≥–ª–∞–≤–Ω–æ–µ –≤ –∂–∏–∑–Ω–∏?', options: {
      A: '–õ—é–¥–∏ –∏ —ç–º–æ—Ü–∏–∏',
      B: '–ó–Ω–∞–Ω–∏—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
      C: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
      D: '–°–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–≤–æ–±–æ–¥–∞',
    }},
  { q: '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –∫–∞–∫ –¥–µ–π—Å—Ç–≤—É–µ—à—å?', options: {
      A: '–ë–µ—Ä—É—Å—å —Å—Ä–∞–∑—É, –∞ –ø–æ—Ç–æ–º —Ä–∞–∑–±–µ—Ä—É—Å—å',
      B: '–°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –ø–ª–∞–Ω–∏—Ä—É—é',
      C: '–î–µ–ª—é –Ω–∞ —à–∞–≥–∏ –∏ –Ω–∞—á–∏–Ω–∞—é –¥–µ–ª–∞—Ç—å',
      D: '–ò—â—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å',
    }},
];

const RESULT_TEXT: Record<Option, { title: string; desc: string }> = {
  A: { title: 'üéâ –≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç-–≠–Ω—Ç—É–∑–∏–∞—Å—Ç', desc: '–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π, –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –¥—Ä—É–≥–∏—Ö. –õ—é–±–∏—à—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –∑–∞—Ä—è–∂–∞–µ—à—å –ø–æ–∑–∏—Ç–∏–≤–æ–º.' },
  B: { title: 'üß© –ê–Ω–∞–ª–∏—Ç–∏–∫-–ú—ã—Å–ª—è—â–∏–π', desc: '–†–∞—Ü–∏–æ–Ω–∞–ª–µ–Ω –∏ –ª–æ–≥–∏—á–µ–Ω, –≤—Å—ë –ø—Ä–æ–¥—É–º—ã–≤–∞–µ—à—å. –õ—é–±–∏—à—å –ø–æ—Ä—è–¥–æ–∫ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å, —Ü–µ–Ω–∏—à—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç.' },
  C: { title: 'üí™ –ü—Ä–∞–∫—Ç–∏–∫-–†–µ–∞–ª–∏—Å—Ç', desc: '–ß–µ–ª–æ–≤–µ–∫ –¥–µ–ª–∞. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–∞ —Ç–µ–±—è –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è.' },
  D: { title: 'üåà –¢–≤–æ—Ä–µ—Ü-–ú–µ—á—Ç–∞—Ç–µ–ª—å', desc: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π, –ª—é–±–∏—à—å –Ω–µ–æ–±—ã—á–Ω—ã–µ –∏–¥–µ–∏ –∏ —Å–≤–æ–±–æ–¥—É —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è.' },
};

export default function PersonalityTest() {
  const nav = useNavigate();
  const [step, setStep] = useState(0);                 // –æ—Ç 0 –¥–æ 10 (10 = —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
  const [answers, setAnswers] = useState<Option[]>([]);

  const progress = `${step}/${QUESTIONS.length}`;

  const onPick = (opt: Option) => {
    setAnswers((prev) => [...prev, opt]);
    setStep((prev) => prev + 1);
  };

  const result = useMemo(() => {
    if (step < QUESTIONS.length) return null;
    // –ø–æ—Å—á–∏—Ç–∞—Ç—å —á—Ç–æ –±–æ–ª—å—à–µ: A/B/C/D
    const counts: Record<Option, number> = { A: 0, B: 0, C: 0, D: 0 };
    for (const a of answers) counts[a]++;
    const best = (Object.keys(counts) as Option[]).reduce((m, k) =>
      counts[k] > counts[m] ? k : m, 'A');
    return RESULT_TEXT[best];
  }, [step, answers]);

  // –≠–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  if (result) {
    return (
      <div className={s.page}>
        <div className={`${s.card} ${s.result}`}>
          <div className={s.title}>{result.title}</div>
          <div className={s.lead}>{result.desc}</div>

          <div className={s.actions}>
            <button className={`${s.btn} ${s.primary}`} onClick={() => nav('/tests')}>
              –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ç–µ—Å—Ç—ã
            </button>
            <button className={`${s.btn} ${s.ghost}`} onClick={() => nav('/')}>
              –ù–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </div>
        </div>
      </div>
    );
  }

  // –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
  const { q, options } = QUESTIONS[step];

  return (
    <div className={s.page}>
      <div className={s.card}>
        <p className={s.question}>{q}</p>
        <div className={s.answers}>
          {(Object.keys(options) as Option[]).map((key) => (
            <button key={key} className={s.btn} onClick={() => onPick(key)}>
              <b>{key})</b> {options[key]}
            </button>
          ))}
        </div>

        <div className={s.progress}>–í–æ–ø—Ä–æ—Å {progress}</div>
      </div>
    </div>
  );
}
